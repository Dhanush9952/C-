// var names = new List<string> { "<name>", "Ana", "Felipe" };
// foreach (var name in names)
// {
//   Console.WriteLine($"Hello {name.ToUpper()}!");
// }

// var numbers = new List<int> { 1, 2, 3, 4, 5 };

// foreach (var number in numbers)
// {
//     Console.WriteLine($"The square of {number} is {number * number}");
// }

// var numbers = new List<int> {1,2,3,4,5,6}; 
// foreach(var number in numbers)
// {     
//     Console.WriteLine($"The Cube of {number} is {number*number*number}");     
// }
// var names = new List<string> { "<name>", "Ana", "Felipe" };
// Console.WriteLine();
// names.Add("Maria");
// names.Add("Dhanush");
// names.Add("Kishore");
// names.Add("Bill");
// names.Remove("Ana");
// foreach (var name in names)
// {
//   Console.WriteLine($"Hello {name.ToUpper()}!");
// }

// Console.WriteLine($"My name is {names[3]}.");
// Console.WriteLine($"I've added {names[2]} and {names[3]} to the list.");

// INDEX, COUNT
var numbers = new List<int> { 10, 20, 30, 40, 50 };
int thirdElement = numbers[2]; // Access the third element (index 2)
Console.WriteLine(thirdElement);

var names = new List<string> { "Dhanush","Darwin", "Balaji", "Shiva", "Ajith", "Kumar"};
Console.WriteLine($"My name is {names[0]} from {names.Count} given names.");

foreach(var name in names){
Console.WriteLine(name);
}

// INDEX VALUES
var names = new List<string> { "Dhanush","Darwin", "Balaji", "Shiva", "Ajith", "Kumar"};
var index = names.IndexOf("Balaji");
if (index != -1)
{
  Console.WriteLine($"The name {names[index]} is at index {index}");
}
var notFound = names.IndexOf("Not Found");
Console.WriteLine($"When an item is not found, IndexOf returns {notFound}");

names.Sort();
foreach (var name in names)
{
  Console.WriteLine($"Hello {name.ToUpper()}!");
}

// FIBONACCI NUMBERS     
 var fibonacciNumbers = new List<int> { 1, 1 };
Console.WriteLine("Enter the Number: ");
int userInput = Convert.ToInt32(Console.ReadLine());
        // Generate the first 18 Fibonacci numbers (since we already have the first two)
        for (int i = 2; i < userInput; i++)
        {
            var previous = fibonacciNumbers[i - 1];
            var previous2 = fibonacciNumbers[i - 2];

            fibonacciNumbers.Add(previous + previous2);
        }

        // Print the Fibonacci numbers
        foreach (var item in fibonacciNumbers)
        {
            Console.WriteLine(item);
        }

// ************************ Practiced Codes ************************* //
//  var fibonacciNumbers = new List<int> { 1, 1 };
//  Console.WriteLine("Enter the Number: ");
// int userInput = Convert.ToInt32(Console.ReadLine());
//         // Generate the first 18 Fibonacci numbers (since we already have the first two)
//         for (int i = 2; i < userInput; i++)
//         {
//             var previous = fibonacciNumbers[i - 1];
//             var previous2 = fibonacciNumbers[i - 2];

//             fibonacciNumbers.Add(previous + previous2);
//         }

//         // Print the Fibonacci numbers
//         foreach (var item in fibonacciNumbers)
//         {
//             Console.WriteLine(item);
//         }

// int firstValue = 500;
// int secondValue = 600;
// int largerValue;
// largerValue = Math.Max(firstValue, secondValue);
// Console.WriteLine(largerValue);

// string message = "The quick brown fox jumps over the lazy dog.";
// bool result = message.Contains("dog");
// Console.WriteLine(result);

// if (message.Contains("fox"))
// {
//     Console.WriteLine("What does the fox say?");
// }

// Random dice = new Random();

// int roll1 = dice.Next(1, 7);
// int roll2 = dice.Next(1, 7);
// int roll3 = dice.Next(1, 7);

// int total = roll1 + roll2 + roll3;

// Console.WriteLine($"Dice roll: {roll1} + {roll2} + {roll3} = {total}");

// if ((roll1 == roll2) || (roll2 == roll3) || (roll1 == roll3))
// {
//     Console.WriteLine("You rolled doubles! +2 bonus to total!");
//     total += 2;
// }

// if ((roll1 == roll2) && (roll2 == roll3)) 
// {
//     Console.WriteLine("You rolled triples! +6 bonus to total!");
//     total += 6;
// }

// if (total >= 15)
// {
//     Console.WriteLine("You win!");
// }

// if (total < 15)
// {
//     Console.WriteLine("Sorry, you lose.");
// }

// Random dice = new Random();

// int roll1 = dice.Next(1, 7);
// int roll2 = dice.Next(1, 7);
// int roll3 = dice.Next(1, 7);

// int total = roll1 + roll2 + roll3;

// Console.WriteLine($"Dice roll: {roll1} + {roll2} + {roll3} = {total}");

// if ((roll1 == roll2) || (roll2 == roll3) || (roll1 == roll3))
// {
//     Console.WriteLine("You rolled doubles! +2 bonus to total!");
//     total += 2;
// }

// if ((roll1 == roll2) && (roll2 == roll3)) 
// {
//     Console.WriteLine("You rolled triples! +6 bonus to total!");
//     total += 6;
// }

// if (total >= 15)
// {
//     Console.WriteLine("You win!");
// }

// if (total < 15)
// {
//     Console.WriteLine("Sorry, you lose.");
// }

// Random random = new Random();
// int daysUntilExpiration = random.Next(12);
// int discountPercentage = 0;

// if (daysUntilExpiration == 0)
// {
//     Console.WriteLine("Your subscription has expired.");
// }
// else if (daysUntilExpiration == 1)
// {
//     Console.WriteLine("Your subscription expires within a day!");
//     discountPercentage = 20;
// }
// else if (daysUntilExpiration <= 5)
// {
//     Console.WriteLine($"Your subscription expires in {daysUntilExpiration} days.");
//     discountPercentage = 10;
// }
// else if (daysUntilExpiration <= 10)
// {
//     Console.WriteLine("Your subscription will expire soon. Renew now!");
// }

// if (discountPercentage > 0)
// {
//     Console.WriteLine($"Renew now and save {discountPercentage}%.");
// }

/*
string[] fraudulentOrderIDs = new string[3];

fraudulentOrderIDs[0] = "A123";
fraudulentOrderIDs[1] = "B456";
fraudulentOrderIDs[2] = "C789";
// fraudulentOrderIDs[3] = "D000";
*/

// string[] fraudulentOrderIDs = { "A123", "B456", "C789" };

// Console.WriteLine($"First: {fraudulentOrderIDs[0]}");
// Console.WriteLine($"Second: {fraudulentOrderIDs[1]}");
// Console.WriteLine($"Third: {fraudulentOrderIDs[2]}");

// fraudulentOrderIDs[0] = "F000";

// Console.WriteLine($"Reassign First: {fraudulentOrderIDs[0]}");

// Console.WriteLine($"There are {fraudulentOrderIDs.Length} fraudulent orders to process.");

// string[] names = { "Rowena", "Robin", "Bao" };
// foreach (string name in names)
// {
//     Console.WriteLine(name);
// }

// int[] inventory = { 200, 450, 700, 175, 250 };
// int sum = 0;
// int bin = 0;
// foreach (int items in inventory)
// {
//     sum += items;
//     bin++;
//     Console.WriteLine($"Bin {bin} = {items} items (Running total: {sum})");
// }
// Console.WriteLine($"We have {sum} items in inventory.");

// string[] orderIDs = { "B123", "C234", "A345", "C15", "B177", "G3003", "C235", "B179" };

// foreach (string orderID in orderIDs)
// {
//     if (orderID.StartsWith("B"))
//     {
//         Console.WriteLine(orderID);
//     }
// }

// initialize variables - graded assignments 


// int currentAssignments = 5;

// int[] sophiaScores = new int[] { 90, 86, 87, 98, 100 };
// int[] andrewScores = new int[] { 92, 89, 81, 96, 90 };
// int[] emmaScores = new int[] { 90, 85, 87, 98, 68 };
// int[] loganScores = new int[] { 90, 95, 87, 88, 96 };

// // Student names
// string[] studentNames = new string[] {"Sophia", "Andrew", "Emma", "Logan"};

// foreach (string name in studentNames)
// {
//     if (name == "Sophia")
//     {
//         int sophiaSum = 0;
//         decimal sophiaScore;

//         foreach (int score in sophiaScores)
//         {
//             // add the exam score to the sum
//             sophiaSum += score;
//         }

//         sophiaScore = (decimal)(sophiaSum) / currentAssignments;

//         Console.WriteLine("Student\t\tGrade\n");
//         Console.WriteLine("Sophia:\t\t" + sophiaScore + "\tA-");
//     }
// }

// Console.WriteLine("Press the Enter key to continue");
// Console.ReadLine();


// initialize variables - graded assignments 
// int currentAssignments = 5;

// int[] sophiaScores = new int[] { 90, 86, 87, 98, 100 };
// int[] andrewScores = new int[] { 92, 89, 81, 96, 90 };
// int[] emmaScores = new int[] { 90, 85, 87, 98, 68 };
// int[] loganScores = new int[] { 90, 95, 87, 88, 96 };

// // Student names
// string[] studentNames = new string[] { "Sophia", "Andrew", "Emma", "Logan" };

// int[] studentScores = new int[10];

// // Write the Report Header to the console
// Console.WriteLine("Student\t\tGrade\n");

// foreach (string name in studentNames)
// {
//     string currentStudent = name;

//     if (currentStudent == "Sophia")
//         studentScores = sophiaScores;

//     else if (currentStudent == "Andrew")
//         studentScores = andrewScores;

//     else if (currentStudent == "Emma")
//         studentScores = emmaScores;

//     else if (currentStudent == "Logan")
//         studentScores = loganScores;

//     // initialize/reset the sum of scored assignments
//     int sumAssignmentScores = 0;

//     // initialize/reset the calculated average of exam + extra credit scores
//     decimal currentStudentGrade = 0;

//     foreach (int score in studentScores)
//     {
//         // add the exam score to the sum
//         sumAssignmentScores += score;
//     }

//     currentStudentGrade = (decimal)(sumAssignmentScores) / currentAssignments;

//     Console.WriteLine($"{currentStudent}\t\t{currentStudentGrade}\t?");
// }



// initialize variables - graded assignments
// int examAssignments = 5;

// int[] sophiaScores = new int[] { 90, 86, 87, 98, 100, 94, 90 };
// int[] andrewScores = new int[] { 92, 89, 81, 96, 90, 89 };
// int[] emmaScores = new int[] { 90, 85, 87, 98, 68, 89, 89, 89 };
// int[] loganScores = new int[] { 90, 95, 87, 88, 96, 96 };

// // Student names
// string[] studentNames = new string[] { "Sophia", "Andrew", "Emma", "Logan" };

// int[] studentScores = new int[10];

// string currentStudentLetterGrade = "";

// // Write the Report Header to the console
// Console.WriteLine("Student\t\tGrade\n");

// foreach (string name in studentNames)
// {
//     string currentStudent = name;

//     if (currentStudent == "Sophia")
//        studentScores = sophiaScores;

//     else if (currentStudent == "Andrew")
//         studentScores = andrewScores;

//     else if (currentStudent == "Emma")
//         studentScores = emmaScores;

//     else if (currentStudent == "Logan")
//         studentScores = loganScores;

//     // initialize/reset the sum of scored assignments
//     int sumAssignmentScores = 0;

//     // initialize/reset the calculated average of exam + extra credit scores
//     decimal currentStudentGrade = 0;

//     // initialize/reset a counter for the number of assignment 
//     int gradedAssignments = 0;

//     // loop through the scores array and complete calculations for currentStudent
//     foreach (int score in studentScores)
//     {
//         // increment the assignment counter
//         gradedAssignments += 1;

//         if (gradedAssignments <= examAssignments)
//             // add the exam score to the sum
//             sumAssignmentScores += score;

//         else
//             // add the extra credit points to the sum - bonus points equal to 10% of an exam score
//             sumAssignmentScores += score / 10;
//     }

//     currentStudentGrade = (decimal)(sumAssignmentScores) / examAssignments;

//     if (currentStudentGrade >= 97)
//         currentStudentLetterGrade = "A+";

//     else if (currentStudentGrade >= 93)
//         currentStudentLetterGrade = "A";

//     else if (currentStudentGrade >= 90)
//         currentStudentLetterGrade = "A-";

//     else if (currentStudentGrade >= 87)
//         currentStudentLetterGrade = "B+";

//     else if (currentStudentGrade >= 83)
//         currentStudentLetterGrade = "B";

//     else if (currentStudentGrade >= 80)
//         currentStudentLetterGrade = "B-";

//     else if (currentStudentGrade >= 77)
//         currentStudentLetterGrade = "C+";

//     else if (currentStudentGrade >= 73)
//         currentStudentLetterGrade = "C";

//     else if (currentStudentGrade >= 70)
//         currentStudentLetterGrade = "C-";

//     else if (currentStudentGrade >= 67)
//         currentStudentLetterGrade = "D+";

//     else if (currentStudentGrade >= 63)
//         currentStudentLetterGrade = "D";

//     else if (currentStudentGrade >= 60)
//         currentStudentLetterGrade = "D-";

//     else
//         currentStudentLetterGrade = "F";

//     //Console.WriteLine("Student\t\tGrade\tLetter Grade\n");
//     Console.WriteLine($"{currentStudent}\t\t{currentStudentGrade}\t{currentStudentLetterGrade}");
// }

// // required for running in VS Code (keeps the Output windows open to view results)
// Console.WriteLine("\n\rPress the Enter key to continue");
// Console.ReadLine();


//    var names = new List<string>();  
//         names.Add("Sonoo Jaiswal");  
//         names.Add("Ankit");  
//         names.Add("Peter");  
//         names.Add("Irfan");  

//         // Iterate list element using foreach loop  
//         foreach (var name in names)  
//         {  
//             Console.WriteLine(name);  
//         }  



// class Program
// {
//     static void Main()
//     {
//         List<int> numbers = new List<int> { 1, 2, 3, 4, 5, 2, 6, 7, 8, 9, 1 };

//         List<int> duplicateNumbers =  (numbers);

//         if (duplicateNumbers.Count > 0)
//         {
//             Console.WriteLine("Duplicate elements found: ");
//             foreach (var duplicate in duplicateNumbers)
//             {
//                 Console.WriteLine(duplicate);
//             }
//         }
//         else
//         {
//             Console.WriteLine("No duplicate elements found.");
//         }
//     }

//     static List<T> FindDuplicates<T>(List<T> list)
//     {
//         var uniqueElements = new HashSet<T>();
//         var duplicateElements = new List<T>();

//         foreach (var element in list)
//         {
//             if (!uniqueElements.Add(element))
//             {
//                 // If the element is already in the set, it's a duplicate
//                 duplicateElements.Add(element);
//             }
//         }

//         return duplicateElements;
//     }
// }



class Program
{
    static void Main()
    {
        Console.WriteLine("Enter a string: ");
        string stringName = Console.ReadLine();
        
        //LIST
        List<char> lettersList = new List<char>();
        foreach(char c in stringName){
            lettersList.Add(c);
        }

        int left = 0;
        int right = lettersList.Count - 1;
        
        while(left < right){
            char temp = lettersList[right];
            lettersList[right] = lettersList[left];
            lettersList[left] = temp;

            left++;
            right--;
        }
        // string reversedString = new string(lettersList.ToArray());
        // Console.WriteLine("Reversed string is: " + reversedString);
        Console.WriteLine("Reversed string is: ");
        foreach(char s in lettersList){
            Console.Write(s);
        }
        Console.ReadLine();
    }
}



// class Program
// {
//     static void Main()
//     {
//         Console.WriteLine("Enter a string: ");
//         string userInput = Console.ReadLine();
//         string formattedInput = userInput.Replace(" ","").ToLower();

//         if(checkPalindrome(formattedInput)){
//             Console.WriteLine("YES, it is a palindrome");
//         }
//         else{
//             Console.WriteLine("NO, it is not a palindrome");
//         }
//     }

//     static bool checkPalindrome(string str){
//         int left = 0;
//         int right = str.Length - 1;

//         while(left < right){
//             if(str[left] != str[right]){
//                 return false;
//             }
//             left ++;
//             right --;
//         }
//         return true;
//     }
    
// }


// using System;
// using System.Collections.Generic;
// using System.Text;

// class Program
// {
//     static void Main()
//     {
//         Console.Write("Enter a string: ");
//         string inputString = Console.ReadLine();

//         string resultString = RemoveDuplicates(inputString);

//         Console.WriteLine($"String after removing duplicates: {resultString}");

//         Console.ReadLine(); // To keep the console window open
//     }

//     static string RemoveDuplicates(string str)
//     {
//         // Use a HashSet to track unique characters
//         HashSet<char> uniqueChars = new HashSet<char>();

//         // Use a StringBuilder to build the result string efficiently
//         StringBuilder result = new StringBuilder();

//         foreach (char c in str)
//         {
//             // If the character is not in the HashSet, add it to both the HashSet and the result
//             if (uniqueChars.Add(c))
//             {
//                 result.Append(c);
//             }
//         }

//         return result.ToString();
//     }
// }


// using System;
// using System.ComponentModel.DataAnnotations;
// using System.Linq;

// class Program
// {
//     static void Main()
//     {
//         Console.WriteLine("Enter a String: ");
//         string userInput = Console.ReadLine();
//         string removedDuplicates = removeDuplicates(userInput);
//         Console.WriteLine("String after removing Duplicate: " + removedDuplicates);
//         Console.ReadLine();
//     }

//     static string removeDuplicates(string str){
//         char[] ch = str.ToCharArray();
//         int length = ch.Length;
//         for(int i=0; i<length; i++){
//             for(int j=0; j<length; j++){
//                 if(ch[i] == ch[j]){
//                     ch[j] = '\0';
//                 }
//             }
//         }
//         // string final = new string(ch.Where(c => c!= '\0').ToArray());
//         string final = new string(Array.FindAll(ch, c => c != '\0'));
//         return final;
//     }

// }


// using System;
// using System.Collections.Generic;
// using System.Text;

// class Program
// {
//     static void Main()
//     {
//         Console.Write("Enter a string: ");
//         string inputString = Console.ReadLine();

//         // string resultString = RemoveDuplicates(inputString);
//         string resultString = Removeduplicate(inputString);

//         Console.WriteLine($"String after removing duplicates: {resultString}");

//         Console.ReadLine(); // To keep the console window open
//     }

    // static string RemoveDuplicates(string str)
    // {
    //     // Use a HashSet to track unique characters
    //     HashSet<char> uniqueChars = new HashSet<char>();

    //     // Use a StringBuilder to build the result string efficiently
    //     StringBuilder result = new StringBuilder();

    //     foreach (char c in str)
    //     {
    //         // If the character is not in the HashSet, add it to both the HashSet and the result
    //         if (uniqueChars.Add(c))
    //         {
    //             result.Append(c);
    //         }
    //     }

    //     return result.ToString();
    // }
//   internal static string Removeduplicate(string str)  
//  {  
//      string result = string.Empty;  
  
//      for (int i = 0; i < str.Length; i++)  
//      {  
//          if (!result.Contains(str[i]))  
//          {  
//              result += str[i];  
//          }  
//      }  
//      Console.WriteLine(result);  
//  }
// }


// using System.Linq;
// using System;
// namespace LogicalPrograms
// {
//     class Program
//     {
//         static void Main(string[] args)
//         {
//             Console.WriteLine("Enter a string: ");
//             string userInput = Console.ReadLine();
//             var ch = userInput.ToCharArray().Distinct().ToArray();
//             var res = new string(ch);
//             Console.WriteLine("String after removing duplicates: ");
//             Console.WriteLine(res);
//         }
//     }
// }

// class Program{
//     static void Main(string[] args){
//         Console.WriteLine("Enter Numbers: ");
//         int userInput = Convert.ToInt32(Console.ReadLine());
//         Console.WriteLine(addition(userInput));
//     }

//     static int addition(int val){
//         int res = 0;
      
//         while(val > 0)
//         {
//         res += val % 10;
//         val /= 10;
//         }
//         return res;
//     }
// }


// using System;
// using System.Collections.Generic;

// class Program
// {
//     static void Main()
//     {
//         List<int> numbers = GetInput();

//         int largest = int.MinValue;
//         int secondLargest = int.MinValue;

//         foreach (int num in numbers)
//         {
//             if (num > largest)
//             {
//                 secondLargest = largest;
//                 largest = num;
//             }
//             else if (num > secondLargest && num < largest)
//             {
//                 secondLargest = num;
//             }
//         }

//         if (secondLargest != int.MinValue)
//         {
//             Console.WriteLine($"Second largest number: {secondLargest}");
//         }
//         else
//         {
//             Console.WriteLine("List does not have a second largest element.");
//         }

//         Console.ReadLine(); // To keep the console window open
//     }

//     static List<int> GetInput()
//     {
//         Console.WriteLine("Enter numbers separated by spaces:");
//         string input = Console.ReadLine();
        
//         List<int> numbers = new List<int>();

//         foreach (string numberStr in input.Split(' '))
//         {
//             if (int.TryParse(numberStr, out int number))
//             {
//                 numbers.Add(number);
//             }
//             else
//             {
//                 Console.WriteLine($"Invalid input: {numberStr}. Ignored.");
//             }
//         }

//         return numbers;
//     }
// }


// using System;

// class Program
// {
//     static void Main()
//     {
//         Console.Write("Enter numbers separated by spaces: ");
//         string input = Console.ReadLine();

//         int[] array = ParseInput(input);

//         Console.WriteLine("\nOriginal Array:");
//         PrintArray(array);

//         BubbleSort(array);

//         Console.WriteLine("\nSorted Array:");
//         PrintArray(array);

//         Console.ReadLine(); // To keep the console window open
//     }

//     static int[] ParseInput(string input)
//     {
//         string[] numberStrings = input.Split(' ');
//         int[] numbers = new int[numberStrings.Length];

//         for (int i = 0; i < numberStrings.Length; i++)
//         {
//             if (int.TryParse(numberStrings[i], out int number))
//             {
//                 numbers[i] = number;
//             }
//             else
//             {
//                 Console.WriteLine($"Invalid input: {numberStrings[i]}. Ignored.");
//             }
//         }

//         return numbers;
//     }

//     static void BubbleSort(int[] arr)
//     {
//         int n = arr.Length;

//         for (int i = 0; i < n - 1; i++)
//         {
//             for (int j = 0; j < n - i - 1; j++)
//             {
//                 if (arr[j] > arr[j + 1])
//                 {
//                     // Swap arr[j] and arr[j + 1]
//                     int temp = arr[j];
//                     arr[j] = arr[j + 1];
//                     arr[j + 1] = temp;
//                 }
//             }
//         }
//     }

//     static void PrintArray(int[] arr)
//     {
//         foreach (int num in arr)
//         {
//             Console.Write(num + " ");
//         }
//         Console.WriteLine();
//     }
// }


